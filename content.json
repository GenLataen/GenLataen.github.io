{"posts":[{"title":"C语言中静态、动态属性","text":"编程语言分为静态语言和动态语言，静态语言是在编译时进行类型检查，不允许在运行时修改变量类型，通常具有更严格的语法和更慢的开发速度，但与之对应的，在运行时具有更高的效率，常见的静态语言有C、C++、Java、Rust等；动态语言的类型检查发生在运行时，因此具有较为宽松的语法规则、更快的开发速度，当然，凡事皆有利弊，这样牺牲了程序的运行速度，常见的动态语言有Python、JavaScript、Ruby等 静态依赖 vs. 动态依赖 在程序的世界里，**”依赖”通常指的是一个软件组件（如库、框架、模块或软件包）依赖于另一个组件才能正常工作的情况**，通过静态、动态两个属性又可以分为静态依赖、动态依赖 静态（编译时）依赖：通常是指头文件、接口定义或其他编译时资源 动态（运行时）依赖：通常是另一个组件的库、框架或其他运行时资源 静态调用 vs. 动态调用 相比于正常地函数调用，当一个函数作为参数实现另一个函数时（回调函数），此时函数指针可以动态地指向不同地函数，允许在运行时更改函数，这种调用成为动态调用。 静态多态 vs. 动态多态 多态(polymorphism)是面向对象的重要属性，那么它是怎么体现的呢？ 静态（编译时）多态：由编译器解释的多态，包括重载解析，模板解析 动态（运行时）多态：虚函数解析 静态内存分配 vs.动态内存分配 静态（编译时）内存分配： 在编译时确定内存分配的大小和位置。 用于全局变量、静态变量、字符串常量等。 内存分配在程序的静态数据区。 动态（运行时）内存分配： 在程序运行时使用 malloc、calloc、realloc 等函数从堆中分配内存。 分配的内存大小可以在运行时确定。 需要使用 free 函数手动释放分配的内存，以防止内存泄漏 总结 未完待续…","link":"/2024/12/16/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E9%9D%99%E6%80%81%E3%80%81%E5%8A%A8%E6%80%81%E5%B1%9E%E6%80%A7/"}],"tags":[],"categories":[],"pages":[{"title":"about","text":"","link":"/about/index.html"},{"title":"search","text":"","link":"/search/index.html"}]}